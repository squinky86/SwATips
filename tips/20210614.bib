@misc{20210614:abate,
	title={Trace-Relating Compiler Correctness and Secure Compilation},
	author={Carmine Abate and Roberto Blanco and Stefan Ciobaca and Adrien Durier and Deepak Garg and Catalin Hritcu and Marco Patrignani and Éric Tanter and Jérémy Thibault},
	year={2020},
	eprint={1907.05320},
	archivePrefix={arXiv},
	primaryClass={cs.PL}
}
@inproceedings{20210614:busi,
	title={A brief tour of formally secure compilation},
	author={Busi, Matteo and Galletta, Letterio},
	booktitle={3rd Italian Conference on Cyber Security, ITASEC 2019},
	volume={2315},
	year={2019},
	organization={CEUR-WS}
}
@inproceedings{20210614:clarkson,
	author={Clarkson, Michael R. and Schneider, Fred B.},
	title={Hyperproperties},
	booktitle={21st IEEE Computer Security Foundations Symposium},
	volume={},
	year={2008},
	month={Jun},
	pages={51-65}
}
@inproceedings{20210614:dsilva,
	author={D'Silva, Vijay and Payer, Mathias and Song, Dawn},
	booktitle={2015 IEEE Security and Privacy Workshops}, 
	title={The Correctness-Security Gap in Compiler Optimization}, 
	year={2015},
	volume={},
	pages={73-87},
	doi={10.1109/SPW.2015.33}
}
@article{20210614:patrignani,
	author={Patrignani, Marco and Ahmed, Amal and Clarke, Dave},
	title={Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation and Related Work},
	year={2019},
	issue_date={February 2019},
	publisher={Association for Computing Machinery},
	address={New York, NY, USA},
	volume={51},
	number={6},
	issn={0360-0300},
	url={https://doi.org/10.1145/3280984},
	doi={10.1145/3280984},
	abstract={Secure compilation is a discipline aimed at developing compilers that preserve the security properties of the source programs they take as input in the target programs they produce as output. This discipline is broad in scope, targeting languages with a variety of features (including objects, higher-order functions, dynamic memory allocation, call/cc, concurrency) and employing a range of different techniques to ensure that source-level security is preserved at the target level. This article provides a survey of the existing literature on formal approaches to secure compilation with a focus on those that prove fully abstract compilation, which has been the criterion adopted by much of the literature thus far. This article then describes the formal techniques employed to prove secure compilation in existing work, introducing relevant terminology, and discussing the merits and limitations of each work. Finally, this article discusses open challenges and possible directions for future work in secure compilation.},
	journal={ACM Comput. Surv.},
	month=feb,
	articleno={125},
	numpages={36},
	keywords={contextual equivalence, program equivalence, Secure compilation, fully abstract compilation, type preserving compilation}
}
@article{20210614:sidhpurwala,
	title={Security flaws caused by compiler optimizations},
	author={Sidhpurwala, Huzaifa},
	organization={Red Hat, Inc.},
	journal={Red Hat Blog},
	year={2019},
	url={https://www.redhat.com/en/blog/security-flaws-caused-compiler-optimizations}
}
