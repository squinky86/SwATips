	<item>
		<title>The Password that Cannot Be Spoken</title>
		<link>https://www.SwATips.com/articles/20210816.html</link>
		<pubDate>Mon, 16 Aug 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210816.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 16</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> August, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>The Password that Cannot Be Spoken</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Monday 16</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   To combat password reuse, several tools have been devised such as KeePass, 1Password, and Bitwarden. Even
most web browsers now, like Google Chrome, can manage pseudorandom passwords that are reasonably strong and
unique. Each of these tools provides a way to generate cryptographically secure random passwords, but there
is an important limitation to these passwords that makes them a little less secure than they could
be:  
</p>


<blockquote class="quote">     
<!-- l. 3 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;">The <strong>pwgen</strong> program generates passwords which are designed to be easily memorized by humans,
while being as secure as possible. Human-memorable passwords are never going to be as secure as
completely completely random passwords. In particular, passwords generated by <strong>pwgen</strong> without
the <strong>-s</strong> option should not be used in places where the password could be attacked via an off-line
brute-force attack.[<a href="#cite.0@20210816:pwgen" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>]</p></blockquote>


<!-- l. 6 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   The goal of these password generation utilities is to generate passwords that can be written down, stored,
and referenced. But are all passwords ones that fall into this category of pronounceability? Certainly
not!
</p>
<!-- l. 8 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.1   </span> <a id="x1-20001.1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Password Categories</h4>


<!-- l. 10 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">The majority of passwords are ones that may need to be communicated to someone. Passwords that are used for
shared accounts and passwords that must be easily typed on a keyboard fall into this category. But there is another
password category that we must consider: the temporary password.
</p>
<!-- l. 12 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Suppose that you are working for a technical support company, and a user calls claiming to have forgotten their
password. They answer the security questions proving the first factor in authentication (something they <i>know</i>). You
then send an encrypted e-mail with a temporary password that they must obtain via their recorded e-mail address
(something they <i>have</i> access to).
</p>
<!-- l. 14 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   There are few (if any) good reasons for these types of passwords (such as service accounts and temporary
passwords) to be easily pronounceable, communicable, or typed in by a standard keyboard. To limit these passwords
to such keyspaces decreases their security and increases the likelihood of shoulder surfers to obtain
them.
</p>
<!-- l. 16 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.2   </span> <a id="x1-30001.2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>A Solution for Temporary Passwords</h4>


<!-- l. 18 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">Existing password utilities are inadequate for generating non-shoulder-surfable passwords. Therefore, I took the
liberty of creating a new password generation utility: the Unspeakable PassWord GENerator (upwgen,
<a href="https://www.github.com/squinky86/upwgen/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.github.com/squinky86/upwgen/</span></a>). Upwgen works by generating at least a 15-character
password[<a href="#cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, SV-222536r508029_rule] that includes characters in the following glyph blocks (using UTF-32):
</p>
     

<ul class="itemize1">
<li class="itemize">An uppercase letter[<a href="#cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, SV-222537r508029_rule]
</li>     
<li class="itemize">A lowercase letter[<a href="#cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, SV-222538r508029_rule]
</li>     
<li class="itemize">A number[<a href="#cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, SV-222539r508029_rule]
                                                                                         
                                                                                         
     
</li>
<li class="itemize">A recognizable special character[<a href="#cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, SV-222540r508029_rule]
</li>     
<li class="itemize">A non-printing character
</li>     
<li class="itemize">An emoji
</li>     
<li class="itemize">A character in an extinct language
</li>     
<li class="itemize">A gamepiece</li></ul>


<!-- l. 30 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   The emojis and gamepieces add to the keyspace of symbols for the password. The non-printing character makes
it difficult to print out the password or write it on a sticky-note. And the extinct language means that characters
from a language no one currently speaks will be included, making it difficult to communicate what the glyphs
are.
</p>
<!-- l. 32 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.3   </span> <a id="x1-40001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Conclusion</h4>


<!-- l. 34 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">Including symbols that are not easily typed and unprintable glyphs decreases the chance of a password being
shoulder-surfed and increases the likelihood of a password being changed quickly, as it is not easy to simply write on
a sticky note. The enlarged keyspace makes it less likely for a bruteforce attack or rainbow table to contain the
generated passwords.
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-50001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt id="X0-20210816:ASDStig" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd id="bib-1" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210816:ASDStig" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Application Security and Development STIG V5R1.       Tech.       rep.       Oct.       2020.       <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a href="https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_ASD_V5R1_STIG.zip" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_ASD_V5R1_STIG.zip</span></a>.
</p>    
</dd>
<dt id="X0-swatips" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd id="bib-2" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt id="X0-20210816:pwgen" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd id="bib-3" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210816:pwgen" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Philipp       Klaus.       pwgen - generate pronouncable passwords.       June 21,       2011.       <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a href="https://raw.githubusercontent.com/jbernard/pwgen/master/pwgen.1" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://raw.githubusercontent.com/jbernard/pwgen/master/pwgen.1</span></a> (visited on 08/09/2021).</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Ada <del>Low</del>High Integrity Profiles</title>
		<link>https://www.SwATips.com/articles/20210809.html</link>
		<pubDate>Mon, 09 Aug 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210809.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Kevin Keen</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 9</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> August, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Ada <span class="sout" style="text-decoration: line-through;">Low</span>High Integrity Profiles</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Ada is often touted by its supporters as the best programming language ever devised by man. And at least on a
conceptual level there are some good arguments in its favor. But as with any complex programming language there
are corner cases that should be understood and dealt with carefully to avoid those advantages turning into
disadvantages.
</p>
<!-- l. 3 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Enter the Ada High Integrity Profiles. What are these mysterious profiles? With a name like “high integrity”
they must be good. And if Ada itself is already the best programming language, then high integrity Ada must be the
best of the best, right? Not so fast! As we will see, you may want to avoid these profiles unless you absolutely need
them!
</p>
<!-- l. 5 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Profiles in Ada came out of the 1997 International Real-Time Ada Workshop. The <span class="ec-lmtt-10" style="font-family: monospace,monospace;">Ravenscar </span>Profile was
intended to produce a more lightweight (and provably correct) executable with task scheduling that was more
suited to real time applications. It was revised, and eventually included as part of the Ada standard
in 2005.[<a href="#cite.0@20210809:grm" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, § 2.140, p. 71–74] There are several versions of <span class="ec-lmtt-10" style="font-family: monospace,monospace;">Ravenscar </span>including <span class="ec-lmtt-10" style="font-family: monospace,monospace;">ravenscar-cert</span>,
<span class="ec-lmtt-10" style="font-family: monospace,monospace;">ravenscar-zfp</span>, and more. Each variant of a profile has different restrictions on what is and is not allowed using
that runtime system. The most restrictive are the Zero Footprint Profiles (ZFP). These profiles go
to great lengths to make sure that the resulting executable does not link against the Ada runtime
library. As such, they offer the least “bulk” in the binary image, but also the fewest features. One step
above the ZFPs are the “cert” variants, which are intended for profiles that have undergone a separate
certification.
</p>
<!-- l. 7 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Of particular note is the way in which exceptions are handled. Since all of these profiles are attempting to reduce
memory footprint, the handling of exceptions is also reduced. The ZFPs in particular have the least exception
handling. Exceptions still happen (including user defined), but they must be handled locally. No traditional
exception propagation happens in ZFP. There is a “last chance handler” that will be called if an exception is not
handled locally.[<a href="#cite.0@20210809:gnathie" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>, § 4.2.6] In ZFP, this handler must be implemented by the programmer, and the compiler will
enforce its existence.
</p>
<!-- l. 9 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Beyond exceptions, there is an entire gamut of Ada features that are excluded in these profiles.[<a href="#cite.0@20210809:gnathie" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>, § 4.2.2] One
that was particularly interesting is the restriction on non-library level tagged types. Tagged or managed types are of
particular importance to us for code review. Tagged types will automatically have their <span class="ec-lmtt-10" style="font-family: monospace,monospace;">Initialize </span>procedure
called when an object of that type is constructed without an initial value (think constructor but not quite).[<a href="#cite.0@20210809:adap" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">6</a>]
Without that guaranteed initialization, more complex projects that have to be segmented in order to be
analyzed by adacore wind up with tons of false positives about possibly un-initalized variables. We had
heard of a company whose Ada programming standard deliberately avoided the use of tagged types. It
made little sense to us for them to avoid tagged types until we learned about these profiles and their
restrictions.
</p>
<!-- l. 11 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   When Ada is written against embedded systems, it is not uncommon for us to see the use of VxWorks. There are
a set of runtime systems and associated profiles for various versions of VxWorks. For this tip, the salient points of
profiles in general still apply. It is worth noting that the “cert” version of the VxWorks profiles do come with a
default last chance handler that by default will print the stack, raise an <span class="ec-lmtt-10" style="font-family: monospace,monospace;">APEX </span>exception and exit.[<a href="#cite.0@20210809:gnatugx" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>, § A,
Replacement of the Default Last Chance Handler]
</p>
<!-- l. 13 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   While none of these restrictions are a security concern in and of themselves, it does beg for care to be taken.
When combined with the “continue running at any cost” mentality that we see quite often one could see a scenario
where exceptions effectively go unhandled. Code using <span class="ec-lmtt-10" style="font-family: monospace,monospace;">cert </span>or <span class="ec-lmtt-10" style="font-family: monospace,monospace;">zfp </span>profiles, combined with a last chance handler
that swallows exceptions, could render an application unstable and vulnerable. Documentation states that all last
chance handlers must effectively terminate the application,[<a href="#cite.0@20210809:gnathie" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>, § 3.1] but makes no statement that this is
enforced. We often see the sin of catching top level exceptions[<a href="#cite.0@20210809:viega200924" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">5</a>, p. 159] with the mindset of “continue
running at any cost.” It is just as much of a concern under these conditions as it would be in C++
code.
</p>
<!-- l. 15 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   As a bonus tip, note that even MORE risky code can be obtained with the pragmas <span class="ec-lmtt-10" style="font-family: monospace,monospace;">No_Exception_Handlers</span>
and <span class="ec-lmtt-10" style="font-family: monospace,monospace;">No_Exceptions</span>. The <span class="ec-lmtt-10" style="font-family: monospace,monospace;">No_Exception_Handlers </span>pragma disallows all exception handlers except
for the last chance handler. The <span class="ec-lmtt-10" style="font-family: monospace,monospace;">No_Exceptions </span>pragma disables runtime exceptions entirely![<a href="#cite.0@20210809:gnathie" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>, §
3.1]
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt id="X0-20210809:grm" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd id="bib-1" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210809:grm" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>AdaCore.    GNAT Reference Manual.    Tech.    rep.    Free    Software    Foundation,    2020.    <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a href="https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gnat_rm.pdf" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gnat_rm.pdf</span></a>.
</p>    
</dd>
<dt id="X0-20210809:gnatugx" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd id="bib-2" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210809:gnatugx" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>AdaCore.                     GNAT User’s Guide Supplement for Cross Platforms.                     Aug. 5,
2021. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://docs.adacore.com/gnat_ugx-docs/html/gnat_ugx/gnat_ugx.html" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://docs.adacore.com/gnat_ugx-docs/html/gnat_ugx/gnat_ugx.html</span></a> (visited on
08/06/2021).
</p>    
</dd>
<dt id="X0-20210809:gnathie" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd id="bib-3" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210809:gnathie" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>AdaCore.
GNAT User’s Guide Supplement for GNAT Pro Safety-Critical and GNAT Pro High-Security
.
Oct. 17,                                                                                                                     2018.
<span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://docs.adacore.com/gnathie_ug-docs/html/gnathie_ug/gnathie_ug.html" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://docs.adacore.com/gnathie_ug-docs/html/gnathie_ug/gnathie_ug.html</span></a> (visited on
08/06/2021).
</p>    
</dd>
<dt id="X0-swatips" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[4]  
</dt><dd id="bib-4" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt id="X0-20210809:viega200924" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[5]  
</dt><dd id="bib-5" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210809:viega200924" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>John                                 Viega,                                 Michael                                 Howard,
and David LeBlanc. 24 Deadly Sins of Software Security. Programming Flaws and How to Fix Them.
McGraw-Hill Education, 2009. <span class="small-caps" style="font-variant: small-caps;">isbn</span>: 978-0-07-162675-0.
</p>    
</dd>
<dt id="X0-20210809:adap" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[6]  
</dt><dd id="bib-6" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210809:adap" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Wikibooks. Ada Programming/Object Orientation — Wikibooks, The Free Textbook Project. 2021. <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a href="https://en.wikibooks.org/w/index.php?title=Ada_Programming/Object_Orientation&amp;oldid=3956556#Constructors" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://en.wikibooks.org/w/index.php?title=Ada_Programming/Object_Orientation&amp;oldid=3956556#Constructors</span></a>
(visited on 08/06/2021).</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Stripping for Fun and Profit</title>
		<link>https://www.SwATips.com/articles/20210802.html</link>
		<pubDate>Mon, 02 Aug 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210802.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 2</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">nd</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> August, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Stripping for Fun and Profit</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Recently, we were given a piece of software with special handling instructions. The software contained a function
which was supposed to be protected: enemies, competitors, and no one without a need-to-know was to ever see how
this function manipulated the parameters it was given.
</p>
<!-- l. 3 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   While reviewing the security of the software, we discovered that the developer compiled the binary and released
it on their website. When asked how they were able to release such a private routine publicly, the customer claimed
that it was fine to release in binary form. Supposedly, the compilation method they used removed the “context of
the Human-Readable Source Code used to generate the Machine-Readable Object Code from propagating into the
Machine-Readable Object Code.”
</p>
<!-- l. 5 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Let’s put this claim to the test! For the sake of creating a fully unclassified example, suppose that no one has
ever created a function for calculating factorials, and a new intern fresh out of college submits the code in Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210802:factorial  --></a>
to solve this highly-secretive, important function. </p>
<!-- l. 6 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1002" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>
   

<div class="lstlisting" id="listing-1" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1003r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">#include</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> &lt;stdio.h&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1004r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">#include</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> &lt;stdlib.h&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1005r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">void</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> factorial(</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> argc, </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">char</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> *argv[]) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1006r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">{ </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">//SUPER SEKRIT FACTORIALS</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1007r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">unsigned</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">long</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">long</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> ret = 1; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1008r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> maxVal = atoi(argv[1]); </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">//0&lt;=maxVal&lt;=20</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1009r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">for</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> (</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> i = 1; i &lt;= maxVal; i++) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1010r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">               ret = ret * (</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">unsigned</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">long</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">long</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">)i; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1011r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        printf("%llu\n", ret); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1012r10" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">}</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 1:</span><span class="content">Unsafe Factorial Function</span></figcaption><!-- tex4ht:label?: x1-1001r1  -->
   
</div>


<!-- l. 19 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   When compiled into machine code, the function isn’t nearly as easy to follow. Figures <a href="#x1-1013r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2<!-- tex4ht:ref: lst:20210802:machine  --></a> and <a href="#x1-1045r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3<!-- tex4ht:ref: lst:20210802:machine2  --></a> show the
unstripped and stripped functional machine code respectively. Had the software been compiled in debug mode, the
source code would have been included alongside the machine code.
</p>
   

<div class="minipage" style="margin-top: 1em; width: 100%;"><!-- l. 22 -->
<a id="x1-1013r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1014" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<div class="lstlisting" id="listing-2" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1015r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">push   %rbp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1016r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rsp,%rbp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1017r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">sub    $0x30,%rsp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1018r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %ecx,0x10(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1019r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rdx,0x18(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1020r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">movl   $0x1,-0x4(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1021r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    0x18(%rbp),%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1022r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">add    $0x8,%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1023r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    (%rax),%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1024r10" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rax,%rcx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1025r11" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">call   29 &lt;factorial+0x29&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1026r12" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,-0xc(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1027r13" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">movl   $0x1,-0x8(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1028r14" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">jmp    45 &lt;factorial+0x45&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1029r15" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x8(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1030r16" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x4(%rbp),%edx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1031r17" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">imul   %edx,%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1032r18" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,-0x4(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1033r19" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">addl   $0x1,-0x8(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1034r20" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x8(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1035r21" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">cmp    -0xc(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1036r22" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">jle    35 &lt;factorial+0x35&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1037r23" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x4(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1038r24" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,%edx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1039r25" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">lea    0x0(%rip),%rax # 59 &lt;factorial+0x59&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1040r26" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rax,%rcx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1041r27" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">call   61 &lt;factorial+0x61&gt; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1042r28" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">nop </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1043r29" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">add    $0x30,%rsp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1044r30" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">pop    %rbp</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 2:</span><span class="content">Unstripped Machine Code</span></figcaption><!-- tex4ht:label?: x1-1013r1  -->
</div>
</div>
 
<div class="minipage" style="width: 100%;"><!-- l. 56 -->
<a id="x1-1045r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1046" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<div class="lstlisting" id="listing-3" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1047r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">push   %rbp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1048r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rsp,%rbp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1049r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">sub    $0x30,%rsp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1050r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %ecx,0x10(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1051r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rdx,0x18(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1052r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">movl   $0x1,-0x4(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1053r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    0x18(%rbp),%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1054r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">add    $0x8,%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1055r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">(%rax),%rax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1056r10" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rax,%rcx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1057r11" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">call   0x29 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1058r12" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,-0xc(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1059r13" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">movl   $0x1,-0x8(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1060r14" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">jmp    0x45 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1061r15" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x8(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1062r16" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x4(%rbp),%edx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1063r17" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">imul   %edx,%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1064r18" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,-0x4(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1065r19" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">addl   $0x1,-0x8(%rbp) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1066r20" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x8(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1067r21" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">cmp    -0xc(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1068r22" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">jle    0x35 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1069r23" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    -0x4(%rbp),%eax </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1070r24" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %eax,%edx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1071r25" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">lea    0x0(%rip),%rax # 0x59 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1072r26" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">mov    %rax,%rcx </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1073r27" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">call   0x61 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1074r28" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">nop </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1075r29" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">add    $0x30,%rsp </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1076r30" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">pop    %rbp</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 3:</span><span class="content">Stripped Machine Code</span></figcaption><!-- tex4ht:label?: x1-1045r1  -->
</div></div>


<!-- l. 90 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   As can be seen by the stripped vs. unstripped comparison, there is very little (other than the function name)
that is different. In fact, once this code is sent through a decompiler (using Binary Ninja), the decompiled code can
be seen in figures <a href="#x1-1077r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4<!-- tex4ht:ref: lst:20210802:ninja  --></a> and <a href="#x1-1088r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">5<!-- tex4ht:ref: lst:20210802:ninja2  --></a>.
</p>
   

<div class="minipage" style="margin-top: 1em; width: 100%;"><!-- l. 93 -->
<a id="x1-1077r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1078" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<div class="lstlisting" id="listing-4" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1079r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">int64_t factorial(int32_t arg1, </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">void</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">* arg2) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1080r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">{ </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1081r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        int32_t var_c = 1; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1082r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        int32_t rax_3 = atoi(*(arg2 + 8)); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1083r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">for</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;"> (int32_t var_10 = 1; var_10 s </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1084r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">              &lt;= rax_3; var_10 = var_10 + 1) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1085r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">                 var_c = var_10 * var_c; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1086r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;"> printf(_.rdata, zx.q(var_c)); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1087r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">}</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 4:</span><span class="content">Unstripped Decompilation with Binary
Ninja</span></figcaption><!-- tex4ht:label?: x1-1077r1  -->
</div>
                                                                                         
                                                                                         
</div>
 
<div class="minipage" style="width: 100%;"><!-- l. 106 -->
<a id="x1-1088r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1089" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<div class="lstlisting" id="listing-5" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1090r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">int64_t sub_100401080(int32_t arg1, </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">void</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">* arg2) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1091r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">{ </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1092r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        int32_t var_c = 1; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1093r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        int32_t rax_3 = atoi(*(arg2 + 8)); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1094r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">for</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;"> (int32_t var_10 = 1; var_10 s </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1095r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">              &lt;= rax_3; var_10 = var_10 + 1) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1096r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">                 var_c = var_10 * var_c; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1097r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-70" style="font-size: 70%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;"> printf(data_100403000, zx.q(var_c)); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1098r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-8x-x-87" style="font-size: 69%; font-family: monospace,monospace;">}</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 5:</span><span class="content">Stripped  Decompilation  with  Binary
Ninja</span></figcaption><!-- tex4ht:label?: x1-1088r1  -->
</div></div>


<!-- l. 119 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   While compilation and obfuscation definitely make it more difficult to glean the original meaning of software, it’s
not impossible to trace through the decompilation and figure out the original intent of the developer. If source code
is protected because of what it does, the binary generated from that source code should probably be handled with
the same protections.
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Compounding a Classic TOCTOU Mistake</title>
		<link>https://www.SwATips.com/articles/20210726.html</link>
		<pubDate>Mon, 26 Jul 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210726.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 26</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> July, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Compounding a Classic TOCTOU Mistake</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   One project was marked for an operational buffer overflow (CWE-119) and poor coding practices when a buffer
reading in a configuration file was set to a static size before reading in the file. The code sent for validation to fix the
issue looked similar to that of Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210726:toctou  --></a>.
</p>
   

<!-- l. 3 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1002" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>
   

<div id="listing-1" class="lstlisting" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1003r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">1</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">fseek(fp, 0, SEEK_END); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1004r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">2</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">long</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> size = ftell(fp); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1005r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">3</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">char</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> *buf = malloc(</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">sizeof</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">(</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">char</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">)*size); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1006r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">4</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">fseek(fp, 0, SEEK_SET); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1007r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">5</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> c; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1008r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">6</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">for</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> (</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> i = 0; (c = getc(fp)) != EOF; i++) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1009r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">7</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">{ </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1010r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">8</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">if</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> (c == </span><span class="ts1-lmtt9-" style="font-size: 90%;">'</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">%</span><span class="ts1-lmtt9-" style="font-size: 90%;">'</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1011r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">9</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">               </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">break</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1012r10" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">10</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        buf[i] = c; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1013r11" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">11</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">}</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 1:</span><span class="content">Overflows and TOCTOUs</span></figcaption><!-- tex4ht:label?: x1-1001r1  -->
   
</div>


<!-- l. 17 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The developer’s intent is to read a file into a buffer up to an expected truncation character, but the attempted
fixes to the original issues caused more problems than the original code.
</p>
<!-- l. 19 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   First, the code is subject to a Time-Of-Check Time-Of-Use (TOCTOU) issue. By setting up a file
system watcher event, an attacker could append a pernicious payload to the end of the file so that
the file is larger than <span class="ec-lmtt-10" style="font-family: monospace,monospace;">ftell() </span>originally reported. This causes a buffer overflow (CWE-120) on Line
10.
</p>
<!-- l. 21 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Second, the developer created a possible wrap-around issue (CWE-190) when the file’s character count is larger
than <span class="ec-lmtt-10" style="font-family: monospace,monospace;">INT_MAX</span>. The software would then operate outside of the intended buffer boundary on Line 10
(CWE-119).
</p>
<!-- l. 23 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Finally, while inspecting the operational environment, it was discovered that the configuration file had world
write privileges (CWE-276) which could be used to exploit the TOCTOU issue. Coincidentally, the file also had
cleartext passwords (CWE-256) for a connected device.
</p>
<!-- l. 25 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   What a mess a single TOCTOU issue can uncover!
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt id="X0-swatips" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd id="bib-1" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>File-by-File Scanning for Ada</title>
		<link>https://www.SwATips.com/articles/20210719.html</link>
		<pubDate>Mon, 19 Jul 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210719.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jonathan Hickerson</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 19</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> July, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>File-by-File Scanning for Ada</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Scanning code which will not fully build is often a thorn in the side of the software assurance analyst who has
been delivered code from an external customer. This is doubly true in a language such as Ada with few viable
scanning options.
</p>
<!-- l. 3 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   AdaCore CodePeer has an operation called “Analyze File by File” which sounds like it would help if the entire
Ada project will not build. After all, if a portion of the code will build, surely obtaining scan results for that portion
of the code is better than no results at all. An enterprising software assurance analyst, full of hope and cheer, might
try this tool, only to come to the crushing realization that even though it operates on individual files, it is
only intended for use in the context of an already buildable project, sending them back to square
one.
</p>
<!-- l. 5 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   A workaround to this issue, and a way to have CodePeer successfully operate on individual files in an Ada
project is a little more involved.
</p>
<!-- l. 7 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   While a normal <span class="ec-lmtt-10" style="font-family: monospace,monospace;">codepeer-gprbuild </span>scan operates on a project and expects the full project to build, one can
pass it a project and a specific file, and while the project will fail to build, if the individual file builds, it will
generate a <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.SCIL </span>file, which is the output of the building/linking process which CodePeer requires for analysis. The
command line argument for this setup is shown in Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210719:gprbuild  --></a>. </p>
<!-- l. 8 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1002" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<div class="lstlisting" id="listing-1" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1003r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">$ codepeer-gprbuild -ws -c -f -u -P[a project file] --subdirs=codepeer-file --codepeer -gnateC [a .ada, .adb, or .ads file]</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 1:</span><span class="content">CodePeer
GPRBuild
Setup</span></figcaption><!-- tex4ht:label?: x1-1001r1  -->
   
</div>


<!-- l. 12 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Once this file has been processed and its <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.SCIL </span>file created, one can do a normal <span class="ec-lmtt-10" style="font-family: monospace,monospace;">codepeer-gprbuild </span>on the
entire project from within GPS. While the build will fail, it will still check for existing <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.SCIL </span>files and then perform
an analysis on these files. By iteratively performing the above command on all <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.ada</span>, <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.ads</span>, and <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.adb </span>files in the
project, and following it with a normal analysis, an analyst can get some results out of CodePeer. The full process
is:
</p>
<!-- l. 14 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">     
</p>


<ol class="enumerate1" style="list-style-type: decimal;">     
<li class="enumerate" id="x1-1005x1">
Build a new Ada project file (a <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.gpr </span>file) which does nothing but include all of the files within the Ada
project. An example project is shown in Listing <a href="#x1-1006r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2<!-- tex4ht:ref: lst:20210719:samplegpr  --></a>. <!-- l. 16 -->
<a id="x1-1006r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1007" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>     
<div class="lstlisting" id="listing-2" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1008r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">Project Test </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">is</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1009r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">For</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> languages </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">use</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> ("Ada"); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1010r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">For</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> Source_Dirs </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">use</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> ("./**"); </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1011r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">End</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> Test;</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 2:</span><span class="content">All-Inclusive
GPR
Example</span></figcaption><!-- tex4ht:label?: x1-1006r1  -->
     
</div>
</li>     
<li class="enumerate" id="x1-1013x2">
Run the command in Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210719:gprbuild  --></a> against each file that requires CodePeer analysis. This is probably best done
with a script, such as one demonstrated in Listings <a href="#x1-1014r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3<!-- tex4ht:ref: lst:20210719:automationlin  --></a> and <a href="#x1-1021r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4<!-- tex4ht:ref: lst:20210719:automationwin  --></a> where <span class="ec-lmtt-10" style="font-family: monospace,monospace;">Project.gpr </span>is the project created from
Listing <a href="#x1-1006r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2<!-- tex4ht:ref: lst:20210719:samplegpr  --></a>. <!-- l. 23 -->
<a id="x1-1014r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1015" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
                                                                                         
                                                                                         
     
<div class="lstlisting" id="listing-3" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1016r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">#!/bin/bash</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1017r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">find ./ -name "*.ad[abs]" | </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">while</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">read</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> x; </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">do</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1018r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">echo</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> ${x} </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1019r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        codepeer-gprbuild -ws -c -f -u -PProject.gpr --subdirs=codepeer-file --codepeer -gnateC "${x}" </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1020r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">done</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 3:</span><span class="content">Bash
Script
for
Ada
Single-Build
Automation</span></figcaption><!-- tex4ht:label?: x1-1014r1  -->
     
</div>
<!-- l. 31 -->
<a id="x1-1021r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>
<a id="x1-1022" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>     
<div class="lstlisting" id="listing-4" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1023r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">@ECHO OFF </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1024r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">for</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> /R %%f </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">in</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> (.\*) </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">do</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> ( </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1025r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">echo</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> %%~xf|findstr /r "ad[abs]$" &gt; nul 2&gt;&amp;1 </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1026r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">if</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> errorlevel 0 ( </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1027r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">               </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">echo</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> "%%~ff" </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1028r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">               codepeer-gprbuild -ws -c -f -u -PProject.gpr --subdirs=codepeer-file --codepeer -gnateC "%%~ff" </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1029r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        ) </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1030r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">)</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 4:</span><span class="content">Batch
Script
for
Ada
Single-Build
Automation</span></figcaption><!-- tex4ht:label?: x1-1021r1  -->
     
</div>
</li>     
<li class="enumerate" id="x1-1032x3">
In the GPS studio, open the project file, and select <i>analyze</i>. Step one of the analysis process (building and
linking) will fail, but when step two begins, it will detect the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">.SCIL </span>files from above and proceed to analyze
those files.
</li>     
<li class="enumerate" id="x1-1034x4">
In the GPS studio, export the analysis results.</li></ol>


<!-- l. 46 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   I hope this makes the reader’s next adventure in the world of unbuildable Ada code a little less
painful!
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a class="url" href="https://www.SwATips.com/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>A Pedigree of Dropping S-BOMs</title>
		<link>https://www.SwATips.com/articles/20210705.html</link>
		<pubDate>Mon, 05 Jul 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210705.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 5</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> July, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>A Pedigree of Dropping S-BOMs</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Recently, a large software project encountered a serious vulnerability. The project has been in existence since
the early 1990s and consists of millions of lines of code. On May 20<sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup>, CISA issued an advisory that
resulted in several CVEs being created for some of the older RTOSes.[<a href="#cite.0@20210705:ics21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>] When we marked this as a
critical finding against the legacy system, the response we received was, “I didn’t even know that was in
there!”
</p>
<!-- l. 3 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.1   </span> <a id="x1-20001.1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Establishing a Pedigree</h4>


<!-- l. 5 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">While the DoD is still proceeding with its RMF implementation of NIST 800-53 Revision 4, Revision 5 of the RMF
controls creates a new family: SR - Supply Chain Risk Management. One of the new controls is SR-4, related to the
provenance of the supply chain. To date, no categorization baseline requires the implementation of SR-4; however, it
should be anticipated that this control will be tailored in for high-importance and tactical systems in the
future.
</p>
<!-- l. 7 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Part of SR-4 is enhancement SR-4(4) which requires the establishment of provenance and pedigree by keeping up
with the internal composition of software and hardware components. “For software this includes the composition of
open-source and proprietary code, including the version of the component at a given point in time.”[<a href="#cite.0@20210705:nist80053rev5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>, p. 66] This is
a step above the hardware and software lists currently implemented in RMF; the program must manage the
composition at a more granular level. Claiming not to know that a component includes a dependency would be a
failure against this control.
</p>
<!-- l. 9 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.2   </span> <a id="x1-30001.2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Compliance</h4>


<!-- l. 11 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">For software, I recommend implementing Software Package Data Exchange (SPDX) and a Software Bill of Materials
(S-BOM). A compliant policy would include a statement like the following:
</p>
<!-- l. 13 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">     
</p>


<blockquote class="quote">     
<!-- l. 14 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;">Our  organization  requires  that  each  main  software  delivery  must  define  a  Software  Package
Data Exchange (SPDX) file and Software Bill of Materials (S-BOM) detailing all first-order
dependencies.[<a href="#cite.0@20210705:wheeler2019" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>]  The  SPDX  file,  at  a  minimum,  must  include  the  <span class="ec-lmtt-10" style="font-family: monospace,monospace;">PackageName  </span>and
<span class="ec-lmtt-10" style="font-family: monospace,monospace;">PackageLicenseDeclared</span>.  If  they  are  available,  <span class="ec-lmtt-10" style="font-family: monospace,monospace;">PackageOriginator </span>and  <span class="ec-lmtt-10" style="font-family: monospace,monospace;">PackageHomePage</span>
must also be provided. Each main delivery product will also provide an S-BOM consisting of an
SPDX file for each first-order dependency when that first order dependency properly manages
its own dependencies. For example, if Product A is the deliverable and it depends on Product
B, Product B is a first-order dependency. If Product B depends on Product C, Product C is a
second-order dependency and only requires documentation in the S-BOM if it is also a first-order
dependency or if Product B requires Product A to manage its dependencies.
</p>     
<!-- l. 16 --><p class="noindent" style="margin-bottom: 0; margin-top: 1em;">For every major release of the deliverable or every three years (whichever occurs first), a Software
Composition Analysis is performed, and the S-BOM’s SPDX files are compared to the results.
The software composition analysis may be conducted automatically as part of the CI/CD pipeline
or in our Software Assurance assessments. Undocumented dependencies are triaged as security
concerns in our issue tracking system.</p></blockquote>


<!-- l. 19 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   Such a policy requires listings of dependencies with their version numbers, encourages developers to automate
composition analysis, documents the POCs for each dependency, and records the license restrictions of each
component.
                                                                                         
                                                                                         
</p>
<!-- l. 21 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.3   </span> <a id="x1-40001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Recommendations</h4>


<!-- l. 23 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">The Application Sescurity and Development Security Technical Implementation Guide (STIG) should be updated to
check that dependencies are documented appropriately. There is not currently a STIG requirement to document and
manage dependencies.
</p>
<!-- l. 25 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   When issuing Control Correlation Identifiers (CCI) against SR-4(4), DISA should divide this into at least two
checks: one for documenting the composition correctly, and the other for verifying the integrity and correctness of
that composition.
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-50001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt id="X0-20210705:ics21-119-04" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd id="bib-1" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210705:ics21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>US-CERT.  ICS Advisory (ICSA-21-119-04): Multiple RTOS (Update B).  CISA.  May 20,  2021.  <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a class="url" href="https://us-cert.cisa.gov/ics/advisories/icsa-21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://us-cert.cisa.gov/ics/advisories/icsa-21-119-04</span></a> (visited on 06/23/2021).
</p>    
</dd>
<dt id="X0-swatips" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd id="bib-2" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a class="url" href="https://www.SwATips.com/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt id="X0-20210705:nist80053rev5" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd id="bib-3" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210705:nist80053rev5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>National                                Institute                                of                                Standards
and Technology. Security and Privacy Controls for Information Systems and Organizations. Tech. rep.
Special Publication (SP) 800-53 Revision 5. Washington, D.C.: U.S. Department of Commerce, 2001.
<span class="small-caps" style="font-variant: small-caps;">doi</span>:        <a href="https://doi.org/10.6028/NIST.SP.800-53r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">10    .    6028    /    NIST    .    SP    .    800    -    53r5</span></a>.        <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a class="url" href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf</span></a>.
</p>    
</dd>
<dt id="X0-20210705:wheeler2019" class="thebibliography" style="float: left; clear: left; margin-right: 1em;">
[4]  
</dt><dd id="bib-4" class="thebibliography" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210705:wheeler2019" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>David A. Wheeler. SPDX Tutorial. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a class="url" href="https://github.com/david-a-wheeler/spdx-tutorial/blob/cee3cbe7ae5f83ec478e2acf2c9282eafd42ff0f/README.md" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://github.com/david-a-wheeler/spdx-tutorial/blob/cee3cbe7ae5f83ec478e2acf2c9282eafd42ff0f/README.md</span></a>
(visited on 06/23/2021).</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Coverity and Integer Overflows</title>
		<link>https://www.SwATips.com/articles/20210628.html</link>
		<pubDate>Mon, 28 Jun 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210628.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Stacy Lukins</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 28</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> June, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Coverity and Integer Overflows</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Integer overflows have been at the root of a number of security vulnerabilities in software over the years (see [<a href="#cite.0@20210628:cwe-190" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>]
for examples), such as the recently identified issue in which the result of an unchecked integer operation is used for
memory allocation in a number of real time operating systems.[<a href="#cite.0@20210628:ics21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>] The ability of static analysis tools to detect
these types of integer overflow problems vary. This article explores how Coverity identifies integer
overflow.
</p>
<!-- l. 3 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   It would not be especially helpful for a tool to flag every integer operation as a potential overflow. Thus, tools
need some way to differentiate potentially problematic integer operations from seemingly safe integer operations.
Coverity does this by only reporting a defect on an integer operation when the following 3 conditions are met: (1)
The operands are determined to be tainted sources, (2) the operation is addition or multiplication (by default), and
(3) the operation’s result goes to a data sink.[<a href="#cite.0@20210628:coverity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>] All of these conditions can be overridden by setting various checker
options. For example, you can change which data sources are treated as tainted and which integer operations are
examined.
</p>
<!-- l. 5 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   It’s important to understand how Coverity defines tainted sources and sinks. Data can come into a program
from a variety of outside sources (command line, console, filesystem, database, environment variable, RPC request,
HTTP request, HTTP header, etc.). When data from an outside source has not been scanned and validated, it is
considered to be tainted, or unsafe. Coverity tracks tainted data through a program, and it will detect and report
whether the tainted data is used in a sink. A sink is any source code element, such as a function, that must be
protected from tainted data. Sinks can be things like memory allocators, certain system calls, array index
operations, and so on.
</p>
<!-- l. 7 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The simple functions in the (very C-like) C++ code in Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210628:sample  --></a> will be used to illustrate how Coverity identifies
integer overflow. </p>
<!-- l. 8 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1002" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>
   

<div class="lstlisting" id="listing-1" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1003r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">1</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> fun_1() { </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1004r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">2</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> i = 0; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1005r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">3</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        std::cin &gt;&gt; i; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">   // tainted source</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1006r4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">4</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j = i + 5; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">   // int overflow if i is too large</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1007r5" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">5</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">        // data sink</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1008r6" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">6</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">} </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1009r7" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">7</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1010r8" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">8</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> fun_2(</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> val) { </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">     // val not considered tainted (w/ default options)</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1011r9" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">9</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j = val + 5; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;"> // no int overflow here (w/ default options)</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1012r10" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">10</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">        // data sink</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1013r11" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">11</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">} </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1014r12" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">12</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1015r13" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">13</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> call_fun_2() { </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1016r14" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">14</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> i = 0; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1017r15" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">15</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        std::cin &gt;&gt; i; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">   // tainted source</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1018r16" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">16</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j = fun_2(i); </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">// calling fun_2 with tainted data</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1019r17" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">17</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">        // data sink</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1020r18" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">18</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">} </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1021r19" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">19</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1022r20" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">20</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> g = 0; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">              // global</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1023r21" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">21</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">void</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> fun_3() { </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1024r22" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">22</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> i = 0; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1025r23" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">23</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        std::cin &gt;&gt; i; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">   // tainted source</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1026r24" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">24</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        g = i + 5; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">       // no sink after this, so no int overflow flagged</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1027r25" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">25</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">} </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1028r26" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">26</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1029r27" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">27</span></span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> fun_4(</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> val) { </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">     // can set option to consider param val to be tainted</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1030r28" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">28</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">int</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j = 0; </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1031r29" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">29</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">if</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> (val &lt; 100) { </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;"> // checking val, so no longer tainted</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1032r30" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">30</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">               j = val + 5; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">// will not overflow</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1033r31" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">31</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        } </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1034r32" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">32</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">        </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">return</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> j; </span><span class="ec-lmtti-10x-x-90" style="font-size: 90%; font-family: monospace,monospace; font-style: italic;">        // data sink</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-1035r33" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmr-9" style="font-size: 90%;">33</span></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">}</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 1:</span><span class="content">Integer Overflow Examples</span></figcaption><!-- tex4ht:label?: x1-1001r1  -->
   
</div>


<!-- l. 44 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   By default, the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>checker in Coverity is not enabled and must be enabled by using the
<strong>--enable</strong> option of the <strong>cov-analyze</strong> command. Be aware that the <strong>--all</strong> option does not enable the
<span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>checker.[<a href="#cite.0@20210628:coverity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>] The command in Listing <a href="#x1-1036r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2<!-- tex4ht:ref: lst:20210628:analyze  --></a> enables integer overflow checking with default options and
was used to analyze the code in Listing <a href="#x1-1001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210628:sample  --></a>. </p>
<!-- l. 45 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1036r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1037" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<div class="lstlisting" id="listing-2" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1038r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">cov-analyze --dir &lt;path_to_code_idir&gt; --aggressiveness-level high --all --</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">enable</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> INTEGER_OVERFLOW</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 2:</span><span class="content">Cov-analyze
Parameters</span></figcaption><!-- tex4ht:label?: x1-1036r1  -->
   
</div>


<!-- l. 49 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The first function, <strong>fun_1</strong>, is a simple overflow example that will be caught by Coverity when the
<span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>checker is enabled with default checker options. In <strong>fun_1</strong>, <span class="ec-lmtt-10" style="font-family: monospace,monospace;">i </span>comes from an outside source (the
command line, line 3) and is not scanned or validated, which makes the data tainted. A potential overflow occurs on
line 4 (i could be close to or at the max integer value), and the potentially overflowed value is sent to a data sink on
line 5 (returns are treated as data sinks by default in Coverity). Note that the sink could have been something like a
memory allocation instead of a return. Coverity will identify this as an integer overflow defect, since it meets the 3
conditions discussed previously.
</p>
<!-- l. 51 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The integer overflow in <strong>fun_1</strong> is the only integer overflow defect in the source code above that Coverity will
identify using the default options of the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>checker. Consider <strong>fun_2</strong>, which contains the same
addition operation and sink as <strong>fun_1</strong>. Coverity will not flag this as a potential integer overflow, even when a tainted
source is passed in from the <strong>call_fun_2</strong> function on line 16. By default, Coverity does not consider parameters to
                                                                                         
                                                                                         
be tainted sources, so this example does not meet the tainted source condition and Coverity does not flag
it.
</p>
<!-- l. 53 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Now consider <strong>fun_3</strong>, which does contain a tainted source (command line input that is not checked)
and performs the same addition operation. However, there is no sink in this function, so it does not
meet the third condition and Coverity does not flag this operation as a potential integer overflow
problem.
</p>
<!-- l. 55 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Checker options can be used to change the way Coverity identifies tainted sources and sinks. For example,
the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">enable_tainted_params </span>option can be set to <span class="ec-lmtt-10" style="font-family: monospace,monospace;">true </span>to cause Coverity to automatically treat all
function parameters as tainted. Option values for checkers are set by passing <strong>--checker-option</strong> or <strong>-co</strong>
to the cov-analyze command. We can re-analyze the source code using the command in Listing <a href="#x1-1039r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3<!-- tex4ht:ref: lst:20210628:taintedparams  --></a>
which enables the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>checker and sets the <strong>enable_tainted_params</strong> option to true.
</p>
<!-- l. 56 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1039r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-1040" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<div class="lstlisting" id="listing-3" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-1041r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">cov-analyze --dir &lt;path_to_build_idir&gt; --aggressiveness-level high --all --</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">enable</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> INTEGER_OVERFLOW -co INTEGER_OVERFLOW:enable_tainted_params:</span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">true</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 3:</span><span class="content">Cov-analyze
Parameters
for
Tainted
Parameters</span></figcaption><!-- tex4ht:label?: x1-1039r1  -->
   
</div>


<!-- l. 60 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Now Coverity will also flag the addition operation in <strong>fun_2</strong> as an integer overflow, since the parameter val is
considered tainted (the first condition is now met).
</p>
<!-- l. 62 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The addition operation in the last function, <strong>fun_4</strong>, will not be flagged by Coverity as an integer overflow with
either cov-analyze command used. In <strong>fun_4</strong> the function parameter <span class="ec-lmtt-10" style="font-family: monospace,monospace;">val </span>is considered a tainted source when passed
in. However, the parameter is tested on line 29 before the addition occurs (so it is no longer tainted), and an integer
overflow will not occur when the addition is performed. Coverity recognizes this and does not does not flag the
operation.
</p>
<!-- l. 64 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   There are many options you can set that affect the way Coverity identifies tainted sources and sinks. In addition,
the aggressiveness level affects some of the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">INTEGER_OVERFLOW </span>options as well. See the Coverity Checker
Reference[<a href="#cite.0@20210628:coverity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>] for more information.
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-20210628:ics21-119-04" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210628:ics21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>US-CERT.  ICS Advisory (ICSA-21-119-04): Multiple RTOS (Update B).  CISA.  May 20,  2021.  <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a class="url" href="https://us-cert.cisa.gov/ics/advisories/icsa-21-119-04" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://us-cert.cisa.gov/ics/advisories/icsa-21-119-04</span></a> (visited on 06/28/2021).
</p>    
</dd>
<dt class="thebibliography" id="X0-20210628:cwe-190" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd class="thebibliography" id="bib-2" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210628:cwe-190" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>CWE   Content   Team.   “CWE-190:   Integer   Overflow   or   Wraparound”.   In:   (2021).   <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a class="url" href="https://cwe.mitre.org/data/definitions/190.html" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://cwe.mitre.org/data/definitions/190.html</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd class="thebibliography" id="bib-3" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a class="url" href="https://www.SwATips.com/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210628:coverity" style="float: left; clear: left; margin-right: 1em;">
[4]  
</dt><dd class="thebibliography" id="bib-4" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210628:coverity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Synopsis, Inc. “Coverity 2020.09 Checker Reference”. In: (2020).</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Living off the Land</title>
		<link>https://www.SwATips.com/articles/20210621.html</link>
		<pubDate>Mon, 21 Jun 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210621.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 21</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">st</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> June, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Living off the Land</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Living off the Land (LotL) refers to using the tools, scripts, libraries, and binaries that are native
and pre-installed with an environment.[<a href="#cite.0@20210621:rains2020cybersecurity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">6</a>, p. 299] Attackers use the existing tools of their exploited
environment to decrease their footprint and avoid detection, often blending in by using legitimate
tools and administrative functions in a malicious way.[<a href="#cite.0@20210621:calder2020cyber" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>, p. 45] Nevertheless, developers can use LotL
concepts to decrease the attackable footprint of their software as a mitigation strategy against attacks as
well!
</p>
<!-- l. 3 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.1   </span> <a id="x1-20001.1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>LotL: An Attacker’s Perspective</h4>


<!-- l. 5 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">When attacking an environment, penetration testing teams often attempt to take an inventory of
what is available to see what can be utilized to establish persistence and pivot in the environment
without detection. If the attacker has to install specialized tools and packages, intrusion detection and
prevention systems can be configured to look for those packages as part of a defense-in-depth mitigation
strategy.
</p>
<!-- l. 7 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.2   </span> <a id="x1-30001.2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>LotL: A Defender’s Perspective</h4>


<!-- l. 9 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">Defensive (blue) teams should be familiar with the attacks and threats posed by penetration testing (red) teams. In
2013, the DoD used the following definition of Software Assurance: “the level of confidence that software functions
as intended and is free of vulnerabilities, either intentionally or unintentionally designed or inserted as part of the
software, throughout the life cycle.”[<a href="#cite.0@20210621:ndaa2013" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">5</a>, p. 255 §933.e.2] In 2017, the Office for the Secretary of Defense clarified the
definition of “functions as intended” to mean “<i>only</i> functions as intended” by showing confidently that the software
meets functionality and test coverage requirements and also “does not perform unrequired functions.”[<a href="#cite.0@20210621:marien2017" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>, p. 7] Since
2017, the caveat “and only as intended” has been codified as part of the DoD’s definition of Software Assurance.[<a href="#cite.0@20210621:hurt2017" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>,
p. 2]
</p>
<!-- l. 11 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Developers are often tempted by heavyweight frameworks that provide sundry capabilities. For low-assurance
tasks, these frameworks permit rapid development and deployment of solutions. In tactical environments, these
bloated dependencies are much more difficult to maintain. Large frameworks must be maintained and reviewed for
CVEs and security updates in their deployed environments, even when security findings affect areas of the
framework that are not utilized by the solution.
</p>
<!-- l. 13 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.3   </span> <a id="x1-40001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>LotL In Practice</h4>


<!-- l. 15 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">Recently, one particular application provided a framework that used libzip, zlib, 7-Zip, and the System.IO.Compression
ZipArchive routines for reading in compressed files at different parts of the application. During the Software
Assurance scans, we were able to create a payload using the Zip Slip vulnerability to upload and execute any
payload we needed. During postmortem analysis, the developers cleaned up the vulnerability that was used, but
forgot to verify that another location of the code used a vulnerable version of 7-Zip that could stage the same
payload!
</p>
<!-- l. 17 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.4   </span> <a id="x1-50001.4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Mitigations</h4>

                                                                                         
                                                                                         

<!-- l. 19 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">Mitigations to attackers that attempt LotL techniques involve making sure that the land an attacker would get is
insufficient for staging more advanced attacks. When an attacker only gets access to a minimalist, sandboxed
island, there isn’t enough land to live on. They must either be noisy, terraforming the land into a new
environment and risking detection, or silently move on to another, more vulnerable environment to avoid
detection.
</p>
<!-- l. 21 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Some additional information to consider: </p>


<ul class="itemize1">     
<li class="itemize">If installing a webserver, determine the languages web applications are written in. If there are no perl,
PHP, Ruby, or .NET applications, then why install those frameworks to begin with?
</li>     
<li class="itemize">Watch for additional tools being installed. Why should the sandboxed web account have access to
netcat, telnet, or the entire suite of tools? Why is there a compiler installed on the server?
</li>     
<li class="itemize">If a service does not need to be touched by a user, does it make sense to give that service its own
sandbox and account with access only to the application that needs it to run?</li></ul>


<!-- l. 28 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   A defender should follow the least-privilege and minimum functionality practices when developing software. By
refusing to give an attacker much land to live on, developers reduce their exposure space and discourage malicious
activities. As a byproduct of using minimal frameworks and dependencies, maintenance becomes easier, particularly
on disconnected and tactical systems.
</p>
<!-- l. 30 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Containers that provide only the needed functionality should be preferred over monolithic containers that
provide entire operating systems and environments. By sandboxing user execution, an attacker that successfully gets
a foothold into an application is rewarded with their very own tiny sandbox to play in, while non-containerized,
multi-user execution often provides attackers with the keys to the entire kingdom. Compromise is not a fun topic to
consider, but risk prevention is not a binary, pwned-or-not decision. I’d prefer that my software not be compromised,
but if it should become impaired, I’d rather the malicious attacker only be able to steal the sandbox rather than the
entire kingdom!
</p>
<!-- l. 32 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   If you give a crook your sandbox, they’ll defecate in your sand. But if you give a crook your kingdom, they’ll
usurp your entire domain.
                                                                                         
                                                                                         
</p>
   

<h3 class="sectionHead"><a id="x1-60001.4" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-20210621:calder2020cyber" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210621:calder2020cyber" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Alan  Calder.  The Cyber Security Handbook. Prepare for, respond to and recover from cyber attacks.
IT Governance Publishing Ltd, 2020. <span class="small-caps" style="font-variant: small-caps;">isbn</span>: 978-1-78778-261-7.
</p>    
</dd>
<dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd class="thebibliography" id="bib-2" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210621:hurt2017" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd class="thebibliography" id="bib-3" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210621:hurt2017" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Thomas Hurt. Achieving DoD Software Assurance (SwA). Tech. rep. Springfield, VA: 20<span class="cmmi-7" style="font-size: 70%; font-style: italic;">th</span> Annual NDIA
Systems Engineering Conference, Oct. 2017. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://ndiastorage.blob.core.usgovcloudapi.net/ndia/2017/systems/Thursday/Track1/19911_Hurt.pdf" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://ndiastorage.blob.core.usgovcloudapi.net/ndia/2017/systems/Thursday/Track1/19911_Hurt.pdf</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210621:marien2017" style="float: left; clear: left; margin-right: 1em;">
[4]  
</dt><dd class="thebibliography" id="bib-4" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210621:marien2017" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>John R. Marien and Robert A. Martin. Incorporating Software Assurance into Department of Defense Acquisition Contracts.
Tech. rep. Department of Defense (DoD) Software Assurance (SwA) Community of Practice (CoP)
Contract Language Working Group, 2017. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://rt.cto.mil/wp-content/uploads/2019/06/Incorporating-SwA-Contracts-2017-11-15.pdf" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://rt.cto.mil/wp-content/uploads/2019/06/Incorporating-SwA-Contracts-2017-11-15.pdf</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210621:ndaa2013" style="float: left; clear: left; margin-right: 1em;">
[5]  
</dt><dd class="thebibliography" id="bib-5" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210621:ndaa2013" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>NATIONAL DEFENSE AUTHORIZATION ACT FOR FISCAL YEAR 2013. Public Law 112–239.
Jan. 2013. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://www.congress.gov/112/plaws/publ239/PLAW-112publ239.pdf" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.congress.gov/112/plaws/publ239/PLAW-112publ239.pdf</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210621:rains2020cybersecurity" style="float: left; clear: left; margin-right: 1em;">
[6]  
</dt><dd class="thebibliography" id="bib-6" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210621:rains2020cybersecurity" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Tim Rains. Cybersecurity Threats, Malware Trends, and Strategies. Learn to mitigate exploits, malware, phishing, and other social engineering attacks.
Packt Publishing, 2020. <span class="small-caps" style="font-variant: small-caps;">isbn</span>: 978-1-80020-589-5.</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Secure Compilation</title>
		<link>https://www.SwATips.com/articles/20210614.html</link>
		<pubDate>Mon, 14 Jun 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210614.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">5</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Richard Ford</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 14</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> June, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Secure Compilation</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 1 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Ordinary compilers aim to provide correct compilation based on the rules of the source language. Most language
standards allow the compiler to perform optimizations provided they follow the “as if” rule: that the external
interactions of the program are the same as if the compiler had not optimized but rigidly followed the language
abstract model of execution. In addition, refinement is allowed. The source language may allow several different
ways that the program may be executed. The compiler is considered correct if the target code behaves in one of
those ways.
</p>
<!-- l. 3 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Security problems arise because attackers do not play by the source language rules.[<a href="#cite.0@20210614:sidhpurwala" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">7</a>, <a href="#cite.0@20210614:dsilva" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">4</a>] </p>


<ul class="itemize1">     
<li class="itemize">A compromised operating system can inspect the memory of a running program. So, memory locations
formerly occupied by out-of-scope function variables can be inspected to see the possibly sensitive data
they held.
</li>     
<li class="itemize">The timing behavior of the computation can be used to leak sensitive information.</li></ul>


<!-- l. 9 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   The emerging field of secure compilation seeks to define what it means for compilation to be secure.[<a href="#cite.0@20210614:busi" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>, <a href="#cite.0@20210614:patrignani" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">6</a>] There
is much ongoing research on secure compilation.
</p>
<!-- l. 11 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Whereas most compiler correctness research has been on whole-program compilation, the secure compilation
studies use program fragments (called components) which are linked with a context. The context is used to model
attackers. The behavior of a component is characterized by the set of traces (sequences of events) it may produce.
Two components are considered contextually equivalent if, when combined with the same arbitrary context, they
produced the same trace.
</p>
<!-- l. 13 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   A key concept mentioned in many of the papers is that of fully-abstract compilation. A compilation is fully
abstract if it has two properties:
</p>
     

<ol class="enumerate1" style="list-style-type: decimal;">
<li class="enumerate" id="x1-1002x1">     
<i>Contextually equivalence preservation:</i> if two components are contextually equivalent at the source
level, then their compiled forms are also contextually equivalent.
</li>     
<li class="enumerate" id="x1-1004x2">
<i>Contextually equivalent reflection:</i> if the compiled form of two components are contextually equivalent,
then they are also contextually equivalent at the source.</li></ol>


<!-- l. 19 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   Because fully abstract compilation involves quantification over contexts, it is difficult to prove. An alternate
approach is to focus on properties and hyperproperties.[<a href="#cite.0@20210614:clarkson" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">3</a>]
</p>
<!-- l. 21 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   A program property can be represented by the set of traces that satisfy that property. The language semantics
specify the set of allowable traces. A program will satisfy a property if its set of traces (as defined by the language)
is a subset of the property’s traces.
</p>
<!-- l. 23 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   A correct compiler, because of refinement or optimization, is allowed to produce a target program which will
only produce a subset of those traces. But if the source program satisfied the property, the target program will also
(assuming no attacks).
</p>
<!-- l. 25 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Whereas a property is characterized by a set of traces, a hyperproperty is a set of sets of traces. Hyperproperties
can express requirements that cannot be expressed using only properties. For example, non-interference can be
expressed by saying that for every trace involving a mix of low and high inputs and outputs there is another trace
with the high inputs and outputs deleted, that has the same low inputs and outputs (thus the low inputs and
outputs are not influenced by the high inputs or outputs).
</p>
<!-- l. 27 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The goal of secure compilation is not to remove security vulnerabilities from source programs, but to ensure that
no vulnerabilities are introduced. Secure compilation, whether to achieve full abstraction or to preserve
some specified properties in the face of attacks is not possible unless the target language has some
means of protection. In particular, protecting data-in-use requires hardware protection mechanism.
Some example hardware mechanisms that have been studied in regard to secure compilation are:[<a href="#cite.0@20210614:busi" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">2</a>, <a href="#cite.0@20210614:patrignani" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">6</a>]
</p>

                                                                                         
                                                                                         
     

<ul class="itemize1">
<li class="itemize">Typed-assembly language
</li>     
<li class="itemize">Capability Machines (CHERI)
</li>     
<li class="itemize">Protected Module Architectures (PMA): e.g., SGX
</li>     
<li class="itemize">Micro-policies (CRASH/SAFE, or Dover CoreGuard)</li></ul>


<!-- l. 35 -->
<p class="indent" style="margin-top: 0; margin-bottom: 0; text-indent: 0;">   Most of the secure compilation theories have been based on trace events that are the same for source and target
language. But recent work has generalized this theory to use relations to relate source and target event
traces.[<a href="#cite.0@20210614:abate" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>]
</p>
<!-- l. 37 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   Current software development practice targets platforms that do not have the required hardware protection
mechanisms and uses compilers that strive to be correct but that are unaware of the additional security
requirements. Here are some possible recommendations to avoid vulnerabilities: </p>


<ul class="itemize1">     
<li class="itemize">Promote use of hardware protections that are currently available (e.g., SGX and CoreGuard) but not
currently being used.
</li>     
<li class="itemize">Formulate and propose security contracts for programming languages and implement them in some
open-source compilers. For example, an annotation could be added to the declaration of sensitive data.
The compiler could then erase the data as soon as it goes out of scope.
</li>     
<li class="itemize">Use software scanners to detect vulnerabilities and try to use existing compiler features to minimize
exposure.</li></ul>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><a id="x1-20001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-20210614:abate" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:abate" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Carmine Abate et al. Trace-Relating Compiler Correctness and Secure Compilation. 2020. arXiv: <a href="https://arxiv.org/abs/1907.05320" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">1907.
</span><span class="ec-lmtt-10" style="font-family: monospace,monospace;">05320 [cs.PL]</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210614:busi" style="float: left; clear: left; margin-right: 1em;">
[2]  
</dt><dd class="thebibliography" id="bib-2" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:busi" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Matteo   Busi   and   Letterio   Galletta.   “A   brief   tour   of   formally   secure   compilation”.   In:
3rd Italian Conference on Cyber Security, ITASEC 2019
. Vol. 2315. CEUR-WS. 2019.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210614:clarkson" style="float: left; clear: left; margin-right: 1em;">
[3]  
</dt><dd class="thebibliography" id="bib-3" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:clarkson" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Michael                                                       R.                                                       Clarkson
and Fred B. Schneider. “Hyperproperties”. In: 21st IEEE Computer Security Foundations Symposium.
June 2008, pp. 51–65.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210614:dsilva" style="float: left; clear: left; margin-right: 1em;">
[4]  
</dt><dd class="thebibliography" id="bib-4" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:dsilva" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Vijay  D’Silva,  Mathias  Payer,  and  Dawn  Song.  “The  Correctness-Security  Gap  in  Compiler
Optimization”. In: 2015 IEEE Security and Privacy Workshops. 2015, pp. 73–87. <span class="small-caps" style="font-variant: small-caps;">doi</span>: <a href="https://doi.org/10.1109/SPW.2015.33" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">10.1109/SPW.
</span><span class="ec-lmtt-10" style="font-family: monospace,monospace;">2015.33</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[5]  
</dt><dd class="thebibliography" id="bib-5" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210614:patrignani" style="float: left; clear: left; margin-right: 1em;">
[6]  
</dt><dd class="thebibliography" id="bib-6" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:patrignani" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Marco Patrignani, Amal Ahmed, and Dave Clarke. “Formal Approaches to Secure Compilation: A
Survey of Fully Abstract Compilation and Related Work”. In: ACM Comput. Surv. 51.6 (Feb. 2019).
<span class="small-caps" style="font-variant: small-caps;">issn</span>: 0360-0300. <span class="small-caps" style="font-variant: small-caps;">doi</span>: <a href="https://doi.org/10.1145/3280984" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">10.1145/3280984</span></a>. <span class="small-caps" style="font-variant: small-caps;">url</span>: <a href="https://doi.org/10.1145/3280984" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://doi.org/10.1145/3280984</span></a>.
</p>    
</dd>
<dt class="thebibliography" id="X0-20210614:sidhpurwala" style="float: left; clear: left; margin-right: 1em;">
[7]  
</dt><dd class="thebibliography" id="bib-7" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@20210614:sidhpurwala" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Huzaifa Sidhpurwala. “Security flaws caused by compiler optimizations”. In: Red Hat Blog (2019). <span class="small-caps" style="font-variant: small-caps;">url</span>:
<a href="https://www.redhat.com/en/blog/security-flaws-caused-compiler-optimizations" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.redhat.com/en/blog/security-flaws-caused-compiler-optimizations</span></a>.</p></dd></dl>

 

]]></description>
	</item>
	<item>
		<title>Side-Channel Attacks</title>
		<link>https://www.SwATips.com/articles/20210524.html</link>
		<pubDate>Mon, 24 May 2021 00:00:00 -0500</pubDate>
<description><![CDATA[

<p style="margin-top: 0; margin-bottom: 0;">Return to <a href="/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">SwATips</a> | <a href="articles/20210524.pdf" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">pdf</a> | <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><img src="https://www.swatips.com/articles/images/by.svg" width="60" height="21" alt="CC-BY" style="border-top: 0; border-left: 0; border-right: 0;"/></a></p>


<div class="maketitle" style="margin-top: 1em; text-align: center; margin-bottom: 2em;">
                                                                                         
                                                                                         
                                                                                         
                                                                                         

<h2 class="titleHead" style="text-align: center;"> <strong>Software Assurance Tips</strong><br/>
A product of the Software Assurance Tips Team[<a href="#cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1</a>]<br/>
</h2>
<div class="author" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Jon Hood</span></div><br/>
<div class="date" style="text-align: center;"><span class="rm-lmr-12" style="font-size: 120%;">Monday 24</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-12" style="font-size: 120%;"> May, 2021</span></div>
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><span class="titlemark">1   </span> <a id="x1-10001" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Side-Channel Attacks</h3>


<!-- l. 42 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="rm-lmr-8" style="font-size: 80%;">Updated Friday 6</span><sup class="textsuperscript"><span class="rm-lmr-9" style="font-size: 90%;">th</span></sup><span class="rm-lmr-8" style="font-size: 80%;"> August, 2021</span>
</p>
<!-- l. 4 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   The insider threat is one of the most difficult to find. I thought I’d lay out some ways in which
we’ve found side-channel attacks (CWE-514) in actual systems that we have evaluated. They include:
</p>
     

<ul class="itemize1">
<li class="itemize">Inadvertent data through a backdoor
</li>     
<li class="itemize">Purposeful use of hard drive architectures to hide files
</li>     
<li class="itemize">Using seemingly benign documents to deliver an evil payload</li></ul>


<!-- l. 11 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.1   </span> <a id="x1-20001.1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Development Backdoors</h4>


<!-- l. 12 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="paragraphHead" style="margin-top: 2em; font-weight: bold;"><a id="x1-30001.1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmbx-10" style="font-weight: bold;">Developers often leave backdoors into a system.</span></span>
This is sometimes left-over debug access meant to speed up development (CWE-489). When these backdoors are
deployed in the wild, they become attack vectors wielded to access and sneak data out of a system without any
visibility in logs and access control mechanisms. But this article primarily deals with the intentional side
channels:
</p>
<!-- l. 14 -->
<p class="noindent" style="margin-bottom: 0; margin-top: 1em;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.2   </span> <a id="x1-40001.2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Malicious Hardware</h4>


<!-- l. 15 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="paragraphHead" style="margin-top: 2em; font-weight: bold;"><a id="x1-50001.2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmbx-10" style="font-weight: bold;">Hard drive architectures and other removable media can be exploited to provide a side
</span><span class="rm-lmbx-10" style="font-weight: bold;">channel.</span></span>
Suppose that you want to send a sensitive file to a malicious entity, but you don’t want that file to
show up in any filesystem scans or perfunctory data scans of the media. The data may be hidden
outside of filesystem control. In *nix systems, the <span class="ec-lmtt-10" style="font-family: monospace,monospace;">dd </span>command can be used to hide data outside of the
filesystem. Assuming the removable device is /dev/sdb (it doesn’t even have to be partitioned) and
it has 1465149168 sectors, an attacker can run “<span class="ec-lmtt-10" style="font-family: monospace,monospace;">dd of=/dev/sdb bs=512 skip=1465140001 &lt; </span><span class="ts1-lmtt10-">'</span><span class="ec-lmtt-10" style="font-family: monospace,monospace;">I
</span><span class="ec-lmtt-10" style="font-family: monospace,monospace;">am a sneaky little string!</span><span class="ts1-lmtt10-">'</span>” to sneak their message onto the hard drive. To retrieve the string,
the recipient can simply “<span class="ec-lmtt-10" style="font-family: monospace,monospace;">dd if=/dev/sdb bs=512 skip=1465140001 count=30</span>” and retrieve the
text.
</p>
<!-- l. 17 -->
<p class="indent" style="margin-bottom: 0; margin-top: 1em; text-indent: 0;">   This becomes especially hidden when:
</p>
     

<ol class="enumerate1" style="list-style-type: decimal;">
<li class="enumerate" id="x1-5002x1">     
The filesystem does not have anything else stored at the sectors starting at 1465140001
</li>     
<li class="enumerate" id="x1-5004x2">
There is no filesystem provisioned that includes the sectors starting at 1465140001
</li>     
<li class="enumerate" id="x1-5006x3">
A Host Protected Area (HPA) is set so that the operating system can’t see anything past sector
1465140000 (“<span class="ec-lmtt-10" style="font-family: monospace,monospace;">hdparm -N p1465140000 /dev/sdb &amp;&amp; reboot</span>”)</li></ol>

                                                                                         
                                                                                         

<!-- l. 24 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">
</p>
   

<h4 class="subsectionHead"><span class="titlemark">1.3   </span> <a id="x1-60001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Malicious Software</h4>


<!-- l. 25 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;"><span class="paragraphHead" style="margin-top: 2em; font-weight: bold;"><a id="x1-70001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/><span class="rm-lmbx-10" style="font-weight: bold;">Seemingly benign files can hide an attacker’s payload.</span></span>
Don’t believe me? Then take the PDF or HTML version of this tip and run the commands in Listing <a href="#x1-7001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;">1<!-- tex4ht:ref: lst:20210524:binary  --></a> against it
in cygwin! </p>
<!-- l. 26 -->


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-7001r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>


<p style="margin-bottom: 0; margin-top: 1em;"><a id="x1-7002" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></p>
   

<div class="lstlisting" id="listing-1" style="font-family: monospace,monospace; white-space: nowrap; margin-top: 0.5em; margin-bottom: 0.5em;"><span class="label" style="margin-right: 0.5em;"><a id="x1-7003r1" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">$ </span><span class="ec-lmtk-10x-x-90" style="font-size: 90%; font-family: monospace,monospace;">cat</span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;"> -v 20210524.pdf | grep "^%PAY:" | tail -c +6 | base64 -d &gt; sneaky.exe </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-7004r2" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">$ chmod +x sneaky.exe </span><br/><span class="label" style="margin-right: 0.5em;"><a id="x1-7005r3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/></span><span class="ec-lmtt-9" style="font-size: 90%; font-family: monospace,monospace;">$ ./sneaky.exe</span>
<figcaption class="caption" style="text-indent: -2em; margin-left: 3em; margin-right: 1em; text-align: center;"><span class="id" style="font-weight: bold; white-space: nowrap;">Listing 1:</span><span class="content">Hidden Binary in This File</span></figcaption><!-- tex4ht:label?: x1-7001r1  -->
   
</div>

                                                                                         
                                                                                         
   

<h3 class="sectionHead"><a id="x1-80001.3" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>References</h3>


<!-- l. 47 -->
<p class="noindent" style="margin-top: 0; margin-bottom: 0;">    
</p>


<dl class="thebibliography"><dt class="thebibliography" id="X0-swatips" style="float: left; clear: left; margin-right: 1em;">
[1]  
</dt><dd class="thebibliography" id="bib-1" style="margin-left: 2.5em;">
<!-- l. 47 --><p class="noindent" style="margin-top: 0; margin-bottom: 0;"><a id="cite.0@swatips" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"/>Jon Hood, ed. SwATips. <a href="https://www.SwATips.com/" class="url" style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word; hyphens: auto;"><span class="ec-lmtt-10" style="font-family: monospace,monospace;">https://www.SwATips.com/</span></a>.</p></dd></dl>

 

]]></description>
	</item>
